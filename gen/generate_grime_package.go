package gen

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"path"
	"regexp"
	"text/template"
)

var grimeFileTemplate = template.Must(template.New("grimeFile").Parse(`
// This file was auto-generated by Grime.

// +build !js

package {{.Name}}

import "github.com/katsuya94/grime/runtime"

var Library *runtime.Library

func init() {
	Library = runtime.MustNewLibraryFromFile("{{.Name}}")
}
`))

var grimeJsFileTemplate = template.Must(template.New("grimeJsFile").Parse(`
// This file was auto-generated by Grime.

// +build js

package {{.Name}}

import "github.com/katsuya94/grime/runtime"

var Library *runtime.Library

func init() {
	Library = runtime.MustNewLibraryFromString("{{.Name}}", {{.SrcString}})
}
`))

type grimePackage struct {
	Name string
	src  []byte
}

func (p *grimePackage) SrcString() string {
	re := regexp.MustCompile("`")
	escaped := re.ReplaceAll(p.src, []byte("` + \"`\" + `"))
	return fmt.Sprintf("`%s`", escaped)
}

func newGrimePackage(name string, src []byte) *grimePackage {
	return &grimePackage{
		Name: name,
		src:  src,
	}
}

func generateGrimePackage(pattern string) (bool, error) {
	pkg, err := loadPackage(generatedPackagePath(pattern))
	if err != nil {
		return false, err
	} else if pkg == nil {
		return false, nil
	}
	inferredPackageName := path.Base(pattern)
	filepath := path.Join(goPath, "src", pkg.PkgPath, fmt.Sprintf("%v.scm", inferredPackageName))
	f, err := os.Open(filepath)
	if os.IsNotExist(err) {
		return false, nil
	} else if err != nil {
		return false, err
	}
	b, err := ioutil.ReadAll(f)
	if err != nil {
		return false, err
	}
	data := newGrimePackage(inferredPackageName, b)
	buf := &bytes.Buffer{}
	err = grimeFileTemplate.Execute(buf, data)
	if err != nil {
		return false, err
	}
	err = parseCheckWrite(fmt.Sprintf("%v.go", inferredPackageName), pkg.PkgPath, buf.String())
	if err != nil {
		return false, err
	}
	buf.Reset()
	err = grimeJsFileTemplate.Execute(buf, data)
	if err != nil {
		return false, err
	}
	err = parseCheckWrite(fmt.Sprintf("%v_web.go", inferredPackageName), pkg.PkgPath, buf.String())
	if err != nil {
		return false, err
	}
	return true, nil
}
